import matplotlib.pyplot as plt
from keras.layers import Input, Dense, Convolution2D, MaxPooling2D, UpSampling2D, BatchNormalization, Deconvolution2D
from keras.models import Model
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
import numpy as np
from keras.callbacks import TensorBoard


batch_size = 100
nb_epoch = 50

# Image dimensions
img_rows, img_cols = 32, 32
img_channels = 3

# the data, shuffled and split between train and test sets
(X_train, _), (X_test, _) = cifar10.load_data()
print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')


input_img = Input(shape=(img_rows, img_cols, img_channels), batch_shape=(batch_size,img_rows, img_cols, img_channels))

x = Convolution2D(64, 3, 3, activation='relu', border_mode='valid', subsample=(2, 2))(input_img)
x = BatchNormalization()(x)
x = Convolution2D(128, 3, 3, activation='relu', border_mode='valid', subsample=(2, 2))(x)
x = BatchNormalization()(x)
x = Convolution2D(256, 3, 3, activation='relu', border_mode='valid', subsample=(2, 2))(x)
encoded = BatchNormalization()(x)

# at this point the representation is (8, 4, 4) i.e. 128-dimensional
x = Deconvolution2D(128, 3, 3, output_shape=(batch_size, 7, 7, 128), activation='relu', border_mode='valid', subsample=(2, 2))(encoded)
x = BatchNormalization()(x)
x = Deconvolution2D(64, 3, 3, output_shape=(batch_size, 15, 15, 64), activation='relu', border_mode='valid', subsample=(2, 2))(x)
x = BatchNormalization()(x)
x = Deconvolution2D(32, 3, 3, output_shape=(batch_size, 31, 31, 32), activation='relu', border_mode='valid', subsample=(2, 2))(x)
x = BatchNormalization()(x)
decoded = Deconvolution2D(3, 2, 2, output_shape=(batch_size, 32, 32, 3), activation='tanh', border_mode='valid')(x)

autoencoder = Model(input_img, decoded)
autoencoder.summary()

autoencoder.compile(optimizer='adam', loss='binary_crossentropy')


X_train = X_train.astype('float32') / 255.
X_test = X_test.astype('float32') / 255.
X_train = np.reshape(X_train, (len(X_train), img_rows, img_cols, img_channels))
X_test = np.reshape(X_test, (len(X_test), img_rows, img_cols, img_channels))

# this will do preprocessing and realtime data augmentation
datagen = ImageDataGenerator(
    featurewise_center=False,  # set input mean to 0 over the dataset
    samplewise_center=False,  # set each sample mean to 0
    featurewise_std_normalization=False,  # divide inputs by std of the dataset
    samplewise_std_normalization=False,  # divide each input by its std
    zca_whitening=False,  # apply ZCA whitening
    rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
    horizontal_flip=True,  # randomly flip images
    vertical_flip=False)  # randomly flip images

# compute quantities required for featurewise normalization
# (std, mean, and principal components if ZCA whitening is applied)
datagen.fit(X_train)

# fit the model on the batches generated by datagen.flow()
autoencoder.fit_generator(datagen.flow(X_train, X_train,
                                       batch_size=batch_size),
                          samples_per_epoch=X_train.shape[0],
                          nb_epoch=nb_epoch,
                          validation_data=(X_test, X_test),
                          callbacks=[TensorBoard(log_dir='./logs')])

decoded_imgs = autoencoder.predict(X_test)

n = 10
plt.figure(figsize=(20, 4))
for i in range(n):
    # display original
    ax = plt.subplot(2, n, i+1)
    plt.imshow(X_test[i].reshape(img_rows, img_cols, img_channels))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

    # display reconstruction
    ax = plt.subplot(2, n, i + n + 1)
    plt.imshow(decoded_imgs[i].reshape(img_rows, img_cols, img_channels))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()