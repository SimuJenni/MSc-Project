
from keras.layers import Input, Dense, Convolution2D, Flatten, Reshape, BatchNormalization, Deconvolution2D, Activation
from keras.models import Model
from keras.preprocessing.image import ImageDataGenerator
from datasets import cifar_10
import numpy as np
from keras.callbacks import TensorBoard
import matplotlib.pyplot as plt

batch_size = 250
nb_epoch = 50

# Image dimensions
img_rows, img_cols = 32, 32
img_channels = 3

# the data, shuffled and split between train and test sets
(X_train, Y_train), (X_test, Y_test) = cifar_10.load_cartoon_data()

print('X_train shape:', X_train.shape)
print('Y_train shape:', Y_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

input_img = Input(shape=(img_rows, img_cols, img_channels))

x = Convolution2D(128, 3, 3, border_mode='valid', subsample=(2, 2))(input_img)
x = BatchNormalization(axis=3)(x)
x = Activation('relu')(x)
x = Convolution2D(256, 3, 3, border_mode='valid', subsample=(2, 2))(x)
x = BatchNormalization(axis=3)(x)
x = Activation('relu')(x)
x = Convolution2D(512, 3, 3, border_mode='valid', subsample=(2, 2))(x)
x = BatchNormalization(axis=3)(x)
encoded = Activation('relu')(x)

flat = Flatten()(encoded)
hidden = Dense(3*3*512, activation='relu')(flat)
decoder_reshape = Reshape((3, 3, 512))(hidden)

# at this point the representation is (8, 4, 4) i.e. 128-dimensional
x = Deconvolution2D(256, 3, 3, output_shape=(batch_size, 7, 7, 256), border_mode='valid', subsample=(2, 2))(decoder_reshape)
x = BatchNormalization(axis=3)(x)
x = Activation('relu')(x)
x = Deconvolution2D(128, 3, 3, output_shape=(batch_size, 15, 15, 128), border_mode='valid', subsample=(2, 2))(x)
x = BatchNormalization(axis=3)(x)
x = Activation('relu')(x)
x = Deconvolution2D(64, 3, 3, output_shape=(batch_size, 31, 31, 64), border_mode='valid', subsample=(2, 2))(x)
x = BatchNormalization(axis=3)(x)
x = Activation('relu')(x)
decoded = Deconvolution2D(3, 2, 2, output_shape=(batch_size, 32, 32, 3), activation='tanh', border_mode='valid', subsample=(1, 1))(x)

autoencoder = Model(input_img, decoded)
autoencoder.summary()
autoencoder.compile(optimizer='adam', loss='mse')

X_train = X_train.astype('float32') / 255.
X_test = X_test.astype('float32') / 255.
Y_train = Y_train.astype('float32') / 255.
Y_test = Y_test.astype('float32') / 255.
X_train = np.reshape(X_train, (len(X_train), img_rows, img_cols, img_channels))
X_test = np.reshape(X_test, (len(X_test), img_rows, img_cols, img_channels))
Y_train = np.reshape(Y_train, (len(Y_train), img_rows, img_cols, img_channels))
Y_test = np.reshape(Y_test, (len(Y_test), img_rows, img_cols, img_channels))

datagen = ImageDataGenerator(
    featurewise_center=False,
    samplewise_center=False,
    featurewise_std_normalization=False,
    samplewise_std_normalization=False,
    zca_whitening=False,
    rotation_range=0,
    width_shift_range=0.1,
    height_shift_range=0.1,
    horizontal_flip=False,
    vertical_flip=False)

# compute quantities required for featurewise normalization
# (std, mean, and principal components if ZCA whitening is applied)
datagen.fit(X_train)

# fit the model on the batches generated by datagen.flow()
autoencoder.fit_generator(datagen.flow(X_train, Y_train,
                                       batch_size=batch_size),
                          samples_per_epoch=X_train.shape[0],
                          nb_epoch=nb_epoch,
                          validation_data=(X_test, Y_test),
                          callbacks=[TensorBoard(log_dir='./logs')])

decoded_imgs = autoencoder.predict(X_test, batch_size=batch_size)

n = 15
plt.figure(figsize=(20, 6))
for i in range(n):
    # display original input
    ax = plt.subplot(3, n, i+1)
    plt.imshow(X_test[i].reshape(img_rows, img_cols, img_channels))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

    # display reconstruction
    ax = plt.subplot(3, n, i + n + 1)
    plt.imshow(decoded_imgs[i].reshape(img_rows, img_cols, img_channels))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

    # display ground truth
    ax = plt.subplot(3, n, i + n + n + 1)
    plt.imshow(decoded_imgs[i].reshape(img_rows, img_cols, img_channels))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()
plt.savefig('test.pdf')